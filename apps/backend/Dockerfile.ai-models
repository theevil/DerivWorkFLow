FROM python:3.11-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements
COPY Pipfile Pipfile.lock ./

# Install Python dependencies
RUN pip install pipenv && pipenv install --system --deploy

# Copy application code
COPY . .

# Create models directory
RUN mkdir -p /app/models

# Install additional AI dependencies
RUN pip install \
    httpx \
    transformers \
    torch \
    accelerate \
    sentencepiece \
    protobuf

# Create model manager script
RUN echo '#!/usr/bin/env python3' > /app/ai_model_setup.py && \
    echo 'import asyncio' >> /app/ai_model_setup.py && \
    echo 'import os' >> /app/ai_model_setup.py && \
    echo 'import httpx' >> /app/ai_model_setup.py && \
    echo 'from loguru import logger' >> /app/ai_model_setup.py && \
    echo '' >> /app/ai_model_setup.py && \
    echo 'async def download_models():' >> /app/ai_model_setup.py && \
    echo '    ollama_host = os.getenv("OLLAMA_HOST", "http://localhost:11434")' >> /app/ai_model_setup.py && \
    echo '    models = ["phi3:mini", "llama3.1:3b", "gemma2:2b"]' >> /app/ai_model_setup.py && \
    echo '    ' >> /app/ai_model_setup.py && \
    echo '    async with httpx.AsyncClient() as client:' >> /app/ai_model_setup.py && \
    echo '        for model in models:' >> /app/ai_model_setup.py && \
    echo '            try:' >> /app/ai_model_setup.py && \
    echo '                logger.info(f"Pulling model: {model}")' >> /app/ai_model_setup.py && \
    echo '                response = await client.post(f"{ollama_host}/api/pull", json={"name": model})' >> /app/ai_model_setup.py && \
    echo '                if response.status_code == 200:' >> /app/ai_model_setup.py && \
    echo '                    logger.info(f"Successfully pulled {model}")' >> /app/ai_model_setup.py && \
    echo '                else:' >> /app/ai_model_setup.py && \
    echo '                    logger.error(f"Failed to pull {model}: {response.status_code}")' >> /app/ai_model_setup.py && \
    echo '            except Exception as e:' >> /app/ai_model_setup.py && \
    echo '                logger.error(f"Error pulling {model}: {e}")' >> /app/ai_model_setup.py && \
    echo '' >> /app/ai_model_setup.py && \
    echo 'if __name__ == "__main__":' >> /app/ai_model_setup.py && \
    echo '    asyncio.run(download_models())' >> /app/ai_model_setup.py

# Make script executable
RUN chmod +x /app/ai_model_setup.py

# Default command
CMD ["python", "/app/ai_model_setup.py"]
